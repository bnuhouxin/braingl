#ifndef ENUMS_H_
#define ENUMS_H_

#include <QtCore/QMetaType>

namespace Fn
{
    enum class DatasetType : int
    {
        UNKNOWN,
        NIFTI_SCALAR,
        NIFTI_VECTOR,
        NIFTI_TENSOR,
        NIFTI_SH,
        NIFTI_DWI,
        NIFTI_BINGHAM,
        NIFTI_ANY,
        MESH_ASCII,
        MESH_BINARY,
        MESH_ISOSURFACE,
        FIBERS
    };

    enum class Colormap : int
    {
        GRAY,
        RAINBOW1,
        RAINBOW2,
        BLUEWHITERED,
        NONE // used for RGB datasets, takes values directly from texture
             // other colormaps use float packing
    };

    enum class Algo : int
    {
        NONE,
        TEST,
        QBALL,
        QBALL4,
        QBALL6,
        QBALL8,
        TENSORFIT,
        FA,
        EV,
        BINGHAM,
        ISOSURFACE,
        TENSOR_TRACK,
        CROSSING_TRACK,
        BINGHAM_2_TENSOR,
        FIBER_THINNING,
        TRACT_DENSITY
    };
}

Q_DECLARE_METATYPE( Fn::DatasetType )
Q_DECLARE_METATYPE( Fn::Colormap )
Q_DECLARE_METATYPE( Fn::Algo )

// dataset properties
enum FN_PROPERTY
{
    FNPROP_NAME,
    FNPROP_DIM,
    FNPROP_DATATYPE,
    FNPROP_SIZE,
    FNPROP_NX,
    FNPROP_NY,
    FNPROP_NZ,
    FNPROP_DX,
    FNPROP_DY,
    FNPROP_DZ,
    FNPROP_MIN,
    FNPROP_MAX,
    FNPROP_TYPE,
    FNPROP_CREATED_BY,
    FNPROP_FILENAME,
    FNPROP_LOWER_THRESHOLD,
    FNPROP_UPPER_THRESHOLD,
    FNPROP_COLORMAP,
    FNPROP_INTERPOLATION,
    FNPROP_ALPHA,
    FNPROP_ACTIVE,
    FNPROP_ORDER,
    FNPROP_LOD,
    FNPROP_SCALING,
    FNPROP_FA_THRESHOLD,
    FNPROP_EV_THRESHOLD,
    FNPROP_GAMMA,
    FNPROP_OFFSET,
    FNPROP_RENDER_SLICE,
    FNPROP_RENDER_LOWER_X,
    FNPROP_RENDER_UPPER_X,
    FNPROP_RENDER_LOWER_Y,
    FNPROP_RENDER_UPPER_Y,
    FNPROP_RENDER_LOWER_Z,
    FNPROP_RENDER_UPPER_Z,
    FNPROP_MINMAX_SCALING,
    FNPROP_BVALUE,
    FNPROP_TENSOR_RENDERMODE,
    FNPROP_ISO_VALUE,
    FNPROP_NUM_POINTS,
    FNPROP_NUM_LINES,
    FNPROP_FIBER_COLORMODE,
    FNPROP_FIBER_RENDERMODE,
    FNPROP_TEXTURE_GLUINT,
    FNPROP_DATASET_POINTER,
    FNPROP_NEW_DATASET,
    FNPROP_DATASET_LIST,
    FNGLOBAL_GLOBALS,
    FNGLOBAL_SAGITTAL,
    FNGLOBAL_CORONAL,
    FNGLOBAL_AXIAL,
    FNGLOBAL_MAX_SAGITTAL,
    FNGLOBAL_MAX_CORONAL,
    FNGLOBAL_MAX_AXIAL,
    FNGLOBAL_SLICE_DX,
    FNGLOBAL_SLICE_DY,
    FNGLOBAL_SLICE_DZ,
    FNGLOBAL_CORONAL_AXIAL,
    FNGLOBAL_SAGITTAL_AXIAL,
    FNGLOBAL_SAGITTAL_CORONAL,
    FNGLOBAL_LAST_PATH,
    FNGLOBAL_SHOW_SAGITTAL,
    FNGLOBAL_SHOW_CORONAL,
    FNGLOBAL_SHOW_AXIAL,
    FNSETTING_LOCK_WIDGETS,
    FNSETTING_RENDER_CROSSHAIRS,
// settings that need a datastore signal to update widgets need to be inserted above this line
    FNGLOBAL_ZOOM,
    FNGLOBAL_MOVEX,
    FNGLOBAL_MOVEY,
    FNGLOBAL_BBX,
    FNGLOBAL_BBY,
    FNGLOBAL_VIEW
};

enum FN_ORIENT
{
    FN_NONE,
    FN_AXIAL,
    FN_CORONAL,
    FN_SAGITTAL
};

#endif /* ENUMS_H_ */
